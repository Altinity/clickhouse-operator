---
# Setup AlterManager Configuration with Slack Integration
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-alertmanager
type: Opaque
stringData:
  notifications.tmpl: |-
    {{ define "__single_message_title" }}{{ range .Alerts.Firing }}{{ .Labels.alertname }} @ {{ .Annotations.identifier }}{{ end }}{{ range .Alerts.Resolved }}{{ .Labels.alertname }} @ {{ .Annotations.identifier }}{{ end }}{{ end }}
    {{ define "custom_title" }}[ {{ .Status | toUpper }}:{{ if eq .Status "firing" }} :fire: {{ .Alerts.Firing | len }}{{ else }} :ok_hand: {{ .Alerts.Resolved | len }}{{ end }} ] {{ if or (and (eq (len .Alerts.Firing) 1) (eq (len .Alerts.Resolved) 0)) (and (eq (len .Alerts.Firing) 0) (eq (len .Alerts.Resolved) 1)) }}{{ template "__single_message_title" . }}{{ end }}{{ end }}
    {{ define "custom_slack_message" }}
    {{ range .Alerts.Firing }}
    *:fire: fired {{ .Labels.severity | toUpper }} {{ .Annotations.summary }}*
    {{ .Annotations.description }}
    {{ end }}
    {{ range .Alerts.Resolved }}
    *:ok: resolved {{ .Labels.severity | toUpper }} {{ .Annotations.summary }}*
    {{ .Annotations.description }}
    {{ end }}
    {{ end }}
  alertmanager.yaml: |-
    global:
      resolve_timeout: 1m
    templates:
      - /etc/alertmanager/config/notifications.tmpl
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 1m
      repeat_interval: 6h
      receiver: "slack"
    receivers:
    - name: "slack"
      slack_configs:
        - api_url: "${SLACK_WEBHOOK_URL}"
          channel: "${SLACK_CHANNEL}"
          icon_url: https://avatars3.githubusercontent.com/u/3380462
          title: '{{ template "custom_title" . }}'
          text: '{{ template "custom_slack_message" . }}'
          send_resolved: true
---
# Setup AlertManager
apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  name: alertmanager
  labels:
    alertmanager: alertmanager
spec:
  replicas: 1
  serviceAccountName: prometheus
  externalUrl: ${ALERT_MANAGER_EXTERNAL_URL}

---
# Setup ClusterIP Service
# Service would be created in kubectl-specified namespace
# In order to get access outside of k8s it should be exposed as:
# kubectl --namespace ${PROMETHEUS_NAMESPACE} port-forward service/alertmanager 9093
# and point browser to http://localhost:9093
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  labels:
    alertmanager: alertmanager
spec:
  type: ClusterIP
  ports:
    - name: web
      port: 9093
      protocol: TCP
      targetPort: web
  selector:
    alertmanager: alertmanager

---
# Setup AlertManager metrics scraping back to prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    alertmanager: alertmanager
  name: alertmanager
spec:
  endpoints:
    - interval: 30s
      port: web
  namespaceSelector:
    matchNames:
      - ${PROMETHEUS_NAMESPACE}
  selector:
    matchLabels:
      alertmanager: alertmanager
