/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/altinity/clickhouse-operator/pkg/apis/clickhouse.altinity.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClickHouseInstallationTemplateLister helps list ClickHouseInstallationTemplates.
// All objects returned here must be treated as read-only.
type ClickHouseInstallationTemplateLister interface {
	// List lists all ClickHouseInstallationTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClickHouseInstallationTemplate, err error)
	// ClickHouseInstallationTemplates returns an object that can list and get ClickHouseInstallationTemplates.
	ClickHouseInstallationTemplates(namespace string) ClickHouseInstallationTemplateNamespaceLister
	ClickHouseInstallationTemplateListerExpansion
}

// clickHouseInstallationTemplateLister implements the ClickHouseInstallationTemplateLister interface.
type clickHouseInstallationTemplateLister struct {
	indexer cache.Indexer
}

// NewClickHouseInstallationTemplateLister returns a new ClickHouseInstallationTemplateLister.
func NewClickHouseInstallationTemplateLister(indexer cache.Indexer) ClickHouseInstallationTemplateLister {
	return &clickHouseInstallationTemplateLister{indexer: indexer}
}

// List lists all ClickHouseInstallationTemplates in the indexer.
func (s *clickHouseInstallationTemplateLister) List(selector labels.Selector) (ret []*v1.ClickHouseInstallationTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClickHouseInstallationTemplate))
	})
	return ret, err
}

// ClickHouseInstallationTemplates returns an object that can list and get ClickHouseInstallationTemplates.
func (s *clickHouseInstallationTemplateLister) ClickHouseInstallationTemplates(namespace string) ClickHouseInstallationTemplateNamespaceLister {
	return clickHouseInstallationTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClickHouseInstallationTemplateNamespaceLister helps list and get ClickHouseInstallationTemplates.
// All objects returned here must be treated as read-only.
type ClickHouseInstallationTemplateNamespaceLister interface {
	// List lists all ClickHouseInstallationTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClickHouseInstallationTemplate, err error)
	// Get retrieves the ClickHouseInstallationTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ClickHouseInstallationTemplate, error)
	ClickHouseInstallationTemplateNamespaceListerExpansion
}

// clickHouseInstallationTemplateNamespaceLister implements the ClickHouseInstallationTemplateNamespaceLister
// interface.
type clickHouseInstallationTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClickHouseInstallationTemplates in the indexer for a given namespace.
func (s clickHouseInstallationTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1.ClickHouseInstallationTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClickHouseInstallationTemplate))
	})
	return ret, err
}

// Get retrieves the ClickHouseInstallationTemplate from the indexer for a given namespace and name.
func (s clickHouseInstallationTemplateNamespaceLister) Get(name string) (*v1.ClickHouseInstallationTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clickhouseinstallationtemplate"), name)
	}
	return obj.(*v1.ClickHouseInstallationTemplate), nil
}
